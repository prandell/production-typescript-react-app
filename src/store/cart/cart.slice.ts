import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { CartState, ICartItem } from '../../models/cart.models'
import { Product } from '../../models/product.model'
import { RootState, AppThunk } from '../store'
import { fetchDiscounts } from './cart.api'

const initialState: CartState = {
  cartOpen: false,
  cartCount: 0,
  cartTotal: 0,
  cartItems: []
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const discountAsync = createAsyncThunk(
  'cart/fetchDiscount',
  async (productName: string): Promise<number> => {
    const response = await fetchDiscounts(productName)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setCartOpen: (state, action: PayloadAction<boolean>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.cartOpen = action.payload
    },
    incrementCartTotal: (state, action: PayloadAction<number>) => {
      state.cartTotal += action.payload
    },
    addItemToCart: (state, action: PayloadAction<Product>) => {
      incrementCartItem(state.cartItems, action.payload, true)
      updateCartTotalAndCount(state)
    },
    removeItemFromCart: (state, action: PayloadAction<Product>) => {
      incrementCartItem(state.cartItems, action.payload, false)
      updateCartTotalAndCount(state)
    },
    clearProductFromCart: (state, action: PayloadAction<Product>) => {
      clearProduct(state, action.payload)
      updateCartTotalAndCount(state)
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(discountAsync.pending, (state) => {
        //status update to loading
      })
      .addCase(discountAsync.fulfilled, (state, action) => {
        //status update to idle
        state.cartTotal -= action.payload
      })
      .addCase(discountAsync.rejected, (state) => {
        //status update to failed
      })
  }
})

export const {
  setCartOpen,
  addItemToCart,
  removeItemFromCart,
  clearProductFromCart,
  incrementCartTotal
} = cartSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCartCount = (state: RootState): number =>
  state.cart.cartCount
export const selectCartTotal = (state: RootState): number =>
  state.cart.cartTotal
export const selectCartOpen = (state: RootState): boolean => state.cart.cartOpen
export const selectCartItems = (state: RootState): ICartItem[] =>
  state.cart.cartItems

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const roundDownIfClose = (): AppThunk => (dispatch, getState) => {
  const currentValue = selectCartTotal(getState())
  const centsAfterDollar = currentValue % 1
  if (centsAfterDollar <= 0.05) {
    dispatch(incrementCartTotal(-centsAfterDollar))
  }
}

//Helper functions for our reducers
const updateCartTotalAndCount = (state: CartState): void => {
  const { cartItems } = state
  state.cartTotal = cartItems.reduce(
    (total: number, cI: ICartItem) => total + cI.quantity * cI.product.price,
    0
  )
  state.cartCount = cartItems.reduce(
    (total: number, cI: ICartItem) => total + cI.quantity,
    0
  )
}

const incrementCartItem = (
  stateCartItems: ICartItem[],
  product: Product,
  isAdd: boolean
): void => {
  const alteration = isAdd ? 1 : -1
  const existingCartItem = getCartItem(stateCartItems, product)
  if (existingCartItem) {
    existingCartItem.quantity += alteration
  } else {
    stateCartItems.push({ quantity: 1, product })
  }
}

const clearProduct = (cartState: CartState, productToClear: Product) => {
  cartState.cartItems = cartState.cartItems.filter(
    (i: ICartItem) => i.product.id !== productToClear.id
  )
}

const getCartItem = (
  cartItems: ICartItem[],
  productToFind: Product
): ICartItem | undefined =>
  cartItems.find((i) => i.product.id === productToFind.id)

export default cartSlice.reducer
